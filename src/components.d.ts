/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Size, Status } from "./components/input-text/input-text";
export { Size, Status } from "./components/input-text/input-text";
export namespace Components {
    interface AppRoot {
    }
    interface InputText {
        "disabled": boolean;
        "helperTexts": string[];
        "labels": string[];
        "optional": boolean;
        "placeholders": string[];
        "selectedHelperTextIndex": number;
        "selectedLabelIndex": number;
        "selectedPlaceholderIndex": number;
        "size": Size;
        "status": Status;
        "value": string;
        "variant": 'primary' | 'secondary';
    }
}
export interface InputTextCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInputTextElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLInputTextElementEventMap {
        "valueChanged": string;
    }
    interface HTMLInputTextElement extends Components.InputText, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInputTextElementEventMap>(type: K, listener: (this: HTMLInputTextElement, ev: InputTextCustomEvent<HTMLInputTextElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInputTextElementEventMap>(type: K, listener: (this: HTMLInputTextElement, ev: InputTextCustomEvent<HTMLInputTextElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInputTextElement: {
        prototype: HTMLInputTextElement;
        new (): HTMLInputTextElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "input-text": HTMLInputTextElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface InputText {
        "disabled"?: boolean;
        "helperTexts"?: string[];
        "labels"?: string[];
        "onValueChanged"?: (event: InputTextCustomEvent<string>) => void;
        "optional"?: boolean;
        "placeholders"?: string[];
        "selectedHelperTextIndex"?: number;
        "selectedLabelIndex"?: number;
        "selectedPlaceholderIndex"?: number;
        "size"?: Size;
        "status"?: Status;
        "value"?: string;
        "variant"?: 'primary' | 'secondary';
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "input-text": InputText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "input-text": LocalJSX.InputText & JSXBase.HTMLAttributes<HTMLInputTextElement>;
        }
    }
}
